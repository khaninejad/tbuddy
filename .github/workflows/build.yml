name: Build, Package, and Release Bot

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual trigger of the workflow

permissions:
  contents: write  # Ensure the GITHUB_TOKEN has write permissions for releases

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    outputs:
      version: ${{ steps.extract_version_unix.outputs.version || steps.extract_version_windows.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Extract Version (Linux/macOS)
      id: extract_version_unix
      if: runner.os != 'Windows'
      run: |
        VERSION=$(python -c "from __version__ import __version__; print(__version__)")
        echo "VERSION=${VERSION}"
        echo "::set-output name=version::${VERSION}"
      shell: bash

    - name: Extract Version (Windows)
      id: extract_version_windows
      if: runner.os == 'Windows'
      run: |
        $version = python -c "from __version__ import __version__; print(__version__)"
        echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
        Write-Output "::set-output name=version::$version"
      shell: pwsh

    - name: Build installer (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        pip install pyinstaller
        pyinstaller --onefile gui.py

        # For Linux, move the executable to a temp directory
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            mv dist/gui /tmp/tbuddy-installer-linux
        fi
      shell: bash

    - name: Build macOS .app bundle
      if: matrix.os == 'macos-latest'
      run: |
        pip install pyinstaller
        pyinstaller --onefile --name tbuddy-macos gui.py

        # Create a proper .app bundle structure
        mkdir -p /tmp/tbuddy-installer-macos.app/Contents/MacOS
        mkdir -p /tmp/tbuddy-installer-macos.app/Contents/Resources

        # Copy the built executable to the .app bundle
        mv dist/tbuddy-macos /tmp/tbuddy-installer-macos.app/Contents/MacOS/tbuddy-macos

        # Create a simple Info.plist file for the .app bundle
        cat <<EOF > /tmp/tbuddy-installer-macos.app/Contents/Info.plist
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>CFBundleName</key>
          <string>Tbuddy</string>
          <key>CFBundleDisplayName</key>
          <string>Tbuddy</string>
          <key>CFBundleIdentifier</key>
          <string>com.example.tbuddy</string>
          <key>CFBundleVersion</key>
          <string>1.0</string>
          <key>CFBundleExecutable</key>
          <string>tbuddy-macos</string>
          <key>CFBundlePackageType</key>
          <string>APPL</string>
          <key>NSHighResolutionCapable</key>
          <true/>
        </dict>
        </plist>
        EOF
      shell: bash

    - name: Create dmg file for macOS
      if: matrix.os == 'macos-latest'
      run: |
        npm install -g create-dmg
        create-dmg /tmp/tbuddy-installer-macos.app /tmp/ --overwrite --no-code-sign
      shell: bash

    - name: Build installer for Windows
      if: matrix.os == 'windows-latest'
      run: |
        pip install pyinstaller
        pyinstaller --onefile gui.py
        Move-Item -Path dist\gui.exe -Destination C:\temp\tbuddy-installer-windows.exe
      shell: pwsh

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: tbuddy-installer-${{ matrix.os }}
        path: |
          ${{ matrix.os == 'ubuntu-latest' && '/tmp/tbuddy-installer-linux' || '' }}
          ${{ matrix.os == 'windows-latest' && 'C:\\temp\\tbuddy-installer-windows.exe' || '' }}
          ${{ matrix.os == 'macos-latest' && '/tmp/tbuddy-installer-macos.dmg' || '' }}

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set Release Version
      run: echo "VERSION=${{ needs.build.outputs.version }}" >> $GITHUB_ENV

    - name: Download Ubuntu artifact
      uses: actions/download-artifact@v3
      with:
        name: tbuddy-installer-ubuntu-latest
        path: ./downloads

    - name: Download Windows artifact
      uses: actions/download-artifact@v3
      with:
        name: tbuddy-installer-windows-latest
        path: ./downloads

    - name: Download macOS artifact
      uses: actions/download-artifact@v3
      with:
        name: tbuddy-installer-macos-latest
        path: ./downloads

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.build.outputs.version }}
        release_name: "tbuddy Release v${{ needs.build.outputs.version }}"
        body: |
          **Release version:** v${{ needs.build.outputs.version }}
        draft: false
        prerelease: false

    - name: Upload Linux release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./downloads/tbuddy-installer-linux
        asset_name: tbuddy-installer-linux-v${{ needs.build.outputs.version }}
        asset_content_type: application/octet-stream
      if: success()

    - name: Upload macOS release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./downloads/tbuddy-installer-macos.dmg
        asset_name: tbuddy-installer-macos-v${{ needs.build.outputs.version }}.dmg
        asset_content_type: application/octet-stream
      if: success()

    - name: Upload Windows release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./downloads/tbuddy-installer-windows.exe
        asset_name: tbuddy-installer-windows-v${{ needs.build.outputs.version }}.exe
        asset_content_type: application/octet-stream
      if: success()
