name: Build, Package, and Release Bot

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual trigger of the workflow

permissions:
  contents: write  # Ensure the GITHUB_TOKEN has write permissions for releases

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Extract Version from Version File (Linux/macOS)
        id: extract_version
        if: runner.os != 'Windows'
        run: |
          VERSION=$(python -c "from __version__ import __version__; print(__version__)")
          echo "Extracted version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV   # Store the version in the environment file
        shell: bash

      - name: Build and package for macOS
        if: matrix.os == 'macos-latest'
        run: |
          pip install pyinstaller
          pyinstaller --onefile --windowed --name=tbuddy gui.py
          
          # Verify the contents of the dist folder
          echo "Listing contents of dist folder"
          ls -R dist/
        shell: bash

      - name: Upload macOS App
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: tbuddy-macos
          path: ./dist/tbuddy.app

      - name: Build installer (Windows and Ubuntu)
        if: matrix.os != 'macos-latest'
        run: |
          pip install pyinstaller
          pyinstaller --onefile gui.py
          
          # Verify the contents of the dist folder
          echo "Listing contents of dist folder"
          ls -R dist/
        shell: bash

      - name: Upload Windows Installer
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: tbuddy-installer-windows
          path: ./dist/gui.exe

      - name: Upload Ubuntu Installer
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: tbuddy-installer-ubuntu
          path: ./dist/gui  # Ensure this matches the actual output name from PyInstaller

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Release Version
        run: echo "VERSION=${{ env.VERSION }}" >> $GITHUB_ENV

      - name: Download Ubuntu artifact
        uses: actions/download-artifact@v3
        with:
          name: tbuddy-installer-ubuntu
          path: ./downloads

      - name: Download Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: tbuddy-installer-windows
          path: ./downloads

      - name: Download macOS artifact
        uses: actions/download-artifact@v3
        with:
          name: tbuddy-macos
          path: ./downloads

      - name: Verify macOS artifact download
        run: |
          echo "Listing downloaded files for macOS..."
          ls -R ./downloads

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}  # Use the extracted version here
          release_name: "tbuddy Release v${{ env.VERSION }}"
          body: |
            **Release version:** v${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Ubuntu release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./downloads/gui  # Updated to reflect the correct path
          asset_name: tbuddy-installer-ubuntu-v${{ env.VERSION }}
          asset_content_type: application/octet-stream

      - name: Upload macOS release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./downloads/tbuddy.app
          asset_name: tbuddy-macos-v${{ env.VERSION }}.app
          asset_content_type: application/octet-stream

      - name: Upload Windows release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./downloads/gui.exe  # Ensure this matches the actual file name
          asset_name: tbuddy-installer-windows-v${{ env.VERSION }}.exe
          asset_content_type: application/octet-stream
