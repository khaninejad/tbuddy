name: Build, Version, and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Fetch current version
      id: get_version
      run: |
        VERSION=$(python -c "from __version__ import __version__; print(__version__)")
        echo "Current version is $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Bump version
      id: bump_version
      run: |
        NEW_VERSION=$(bump2version patch --dry-run --list | grep "new_version" | cut -d'=' -f2 | tr -d ' ')
        echo "New version is $NEW_VERSION"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        bump2version patch  # Replace with minor/major as needed
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Required for bump2version

    - name: Build installer
      run: |
        pip install pyinstaller
        pyinstaller --onefile gui.py
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            mv dist/gui /tmp/gui-installer
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            mv dist/gui /tmp/gui-installer
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            mv dist/gui.exe C:\temp\gui-installer.exe
        fi
      shell: bash

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.NEW_VERSION }}  # Use the new version here
        release_name: Release ${{ env.NEW_VERSION }}
        body: |
          Changes in this release:
          - List your changes here
        files: |
          ${{ matrix.os == 'ubuntu-latest' && '/tmp/gui-installer' || '' }}
          ${{ matrix.os == 'windows-latest' && 'C:/temp/gui-installer.exe' || '' }}
          ${{ matrix.os == 'macos-latest' && '/tmp/gui-installer' || '' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Tag Release
      run: |
        git config --global user.name "Your Name"
        git config --global user.email "you@example.com"
        git tag v${{ env.NEW_VERSION }}
        git push origin v${{ env.NEW_VERSION }}
