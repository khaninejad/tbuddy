name: Build, Package, and Release Bot

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual trigger of the workflow

permissions:
  contents: write  # Ensure the GITHUB_TOKEN has write permissions for releases

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    outputs:
      version: ${{ steps.extract_version_unix.outputs.version || steps.extract_version_windows.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Extract Version (Linux/macOS)
      id: extract_version_unix
      if: runner.os != 'Windows'
      run: |
        VERSION=$(python -c "from __version__ import __version__; print(__version__)")
        echo "VERSION=${VERSION}"
        echo "::set-output name=version::${VERSION}"
      shell: bash

    - name: Extract Version (Windows)
      id: extract_version_windows
      if: runner.os == 'Windows'
      run: |
        $version = python -c "from __version__ import __version__; print(__version__)"
        echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
        Write-Output "::set-output name=version::$version"
      shell: pwsh

    - name: Build installer
      run: |
        pip install pyinstaller
        pyinstaller --onefile gui.py

        # Move the installer to a temp directory for easier access and rename with correct extension
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            mv dist/gui /tmp/tbuddy-installer-ubuntu  # For Linux
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            mv dist/gui /tmp/tbuddy-installer-macos  # For macOS
        fi
      shell: bash

    - name: Build installer for Windows
      if: matrix.os == 'windows-latest'
      run: |
        Move-Item -Path dist\gui.exe -Destination C:\temp\tbuddy-installer-windows.exe
      shell: pwsh

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: tbuddy-installer-${{ matrix.os }}
        path: |
          ${{ matrix.os == 'ubuntu-latest' && '/tmp/tbuddy-installer-ubuntu' || '' }}
          ${{ matrix.os == 'windows-latest' && 'C:\\temp\\tbuddy-installer-windows.exe' || '' }}
          ${{ matrix.os == 'macos-latest' && '/tmp/tbuddy-installer-macos' || '' }}

  macos_package:
    needs: build
    runs-on: macos-latest
    if: ${{ matrix.os == 'macos-latest' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download macOS artifact
      uses: actions/download-artifact@v3
      with:
        name: tbuddy-installer-macos
        path: ./downloads

    - name: Code-sign the application
      run: |
        codesign --deep --force --verify --sign "Payam Khaninejad" ./downloads/tbuddy-installer-macos
      shell: bash

    - name: Create the component package
      run: |
        pkgbuild --root ./downloads/tbuddy-installer-macos \
                 --identifier com.yourname.tbuddy \
                 --version ${{ needs.build.outputs.version }} \
                 --install-location /Applications \
                 ./downloads/tbuddyComponent.pkg
      shell: bash

    - name: Create Distribution.xml
      run: |
        echo '<?xml version="1.0" encoding="utf-8"?>' > Distribution.xml
        echo '<installer-gui-script minSpecVersion="1">' >> Distribution.xml
        echo '  <title>tbuddy Installer</title>' >> Distribution.xml
        echo '  <license file="license.txt"/>' >> Distribution.xml
        echo '  <options customize="never" require-scripts="false"/>' >> Distribution.xml
        echo '  <choices-outline>' >> Distribution.xml
        echo '    <line choice="default">' >> Distribution.xml
        echo '      <line choice="tbuddy"/>' >> Distribution.xml
        echo '    </line>' >> Distribution.xml
        echo '  </choices-outline>' >> Distribution.xml
        echo '  <choice id="tbuddy" title="tbuddy">' >> Distribution.xml
        echo '    <pkg-ref id="com.yourname.tbuddy.pkg"/>' >> Distribution.xml
        echo '  </choice>' >> Distribution.xml
        echo '  <pkg-ref id="com.yourname.tbuddy.pkg" installKBytes="3000" version="${{ needs.build.outputs.version }}" auth="root">#tbuddyComponent.pkg</pkg-ref>' >> Distribution.xml
        echo '</installer-gui-script>' >> Distribution.xml

    - name: Build the final product package
      run: |
        productbuild --distribution Distribution.xml \
                     --package-path ./downloads \
                     --sign "Developer ID Installer: Your Name (Your Team ID)" \
                     ./downloads/tbuddyInstaller.pkg
      shell: bash

    - name: Upload macOS pkg artifact
      uses: actions/upload-artifact@v3
      with:
        name: tbuddyInstaller.pkg
        path: ./downloads/tbuddyInstaller.pkg

  release:
    needs: [build, macos_package]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set Release Version
      run: echo "VERSION=${{ needs.build.outputs.version }}" >> $GITHUB_ENV

    - name: Download Ubuntu artifact
      uses: actions/download-artifact@v3
      with:
        name: tbuddy-installer-ubuntu-latest
        path: ./downloads

    - name: Download Windows artifact
      uses: actions/download-artifact@v3
      with:
        name: tbuddy-installer-windows-latest
        path: ./downloads

    - name: Download macOS pkg artifact
      uses: actions/download-artifact@v3
      with:
        name: tbuddyInstaller.pkg
        path: ./downloads

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.build.outputs.version }}
        release_name: "tbuddy Release v${{ needs.build.outputs.version }}"
        body: |
          **Release version:** v${{ needs.build.outputs.version }}
        draft: false
        prerelease: false

    - name: Upload Ubuntu release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./downloads/tbuddy-installer-ubuntu
        asset_name: tbuddy-installer-ubuntu-v${{ needs.build.outputs.version }}
        asset_content_type: application/octet-stream

    - name: Upload macOS release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./downloads/tbuddyInstaller.pkg
        asset_name: tbuddyInstaller-macos-v${{ needs.build.outputs.version }}.pkg
        asset_content_type: application/octet-stream

    - name: Upload Windows release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./downloads/tbuddy-installer-windows.exe
        asset_name: tbuddy-installer-windows-v${{ needs.build.outputs.version }}.exe
        asset_content_type: application/octet-stream
