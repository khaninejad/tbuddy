name: Build, Package, and Release Bot

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual trigger of the workflow

permissions:
  contents: write  # Ensure the GITHUB_TOKEN has write permissions for releases

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    outputs:
      version: ${{ steps.extract_version.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Extract Version
      id: extract_version
      run: |
        # Extract version from __version__.py
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          $version = python -c "from __version__ import __version__; print(__version__)"
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
        else
          VERSION=$(python -c "from __version__ import __version__; print(__version__)")
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
        fi
        echo "::set-output name=version::$VERSION"
      shell: bash

    - name: Build installer
      run: |
        pip install pyinstaller
        pyinstaller --onefile gui.py

        # Move the installer to a temp directory for easier access
        if [ "${{ matrix.os }}" == "ubuntu-latest" ] || [ "${{ matrix.os }}" == "macos-latest" ]; then
            mv dist/gui /tmp/tbuddy-installer  # For Linux/macOS
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            Move-Item -Path dist\gui.exe -Destination C:\temp\tbuddy-installer.exe
        fi
      shell: bash

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: bot-installer-${{ matrix.os }}
        path: |
          ${{ matrix.os == 'ubuntu-latest' && '/tmp/tbuddy-installer' || '' }}
          ${{ matrix.os == 'windows-latest' && 'C:\\temp\\tbuddy-installer.exe' || '' }}
          ${{ matrix.os == 'macos-latest' && '/tmp/tbuddy-installer' || '' }}

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set Release Version
      run: echo "VERSION=${{ needs.build.outputs.version }}" >> $GITHUB_ENV

    - name: Download Ubuntu artifact
      uses: actions/download-artifact@v3
      with:
        name: bot-installer-ubuntu-latest
        path: ./downloads

    - name: Download Windows artifact
      uses: actions/download-artifact@v3
      with:
        name: bot-installer-windows-latest
        path: ./downloads

    - name: Download macOS artifact
      uses: actions/download-artifact@v3
      with:
        name: bot-installer-macos-latest
        path: ./downloads

    - name: Build and Code Sign the App for macOS
      if: matrix.os == 'macos-latest'
      run: |
        APP_NAME="tbuddy-installer"
        DMG_FILE_NAME="${APP_NAME}-Installer.dmg"
        VOLUME_NAME="${APP_NAME} Installer"
        SOURCE_FOLDER_PATH="/tmp/${APP_NAME}.app"

        # Create a temporary directory for the application
        mkdir -p "$SOURCE_FOLDER_PATH/Contents/MacOS"
        cp ./downloads/tbuddy-installer "$SOURCE_FOLDER_PATH/Contents/MacOS/"

        # Create Info.plist file for the application
        echo '<?xml version="1.0" encoding="UTF-8"?>' > "$SOURCE_FOLDER_PATH/Contents/Info.plist"
        echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> "$SOURCE_FOLDER_PATH/Contents/Info.plist"
        echo '<plist version="1.0">' >> "$SOURCE_FOLDER_PATH/Contents/Info.plist"
        echo '<dict>' >> "$SOURCE_FOLDER_PATH/Contents/Info.plist"
        echo '    <key>CFBundleExecutable</key>' >> "$SOURCE_FOLDER_PATH/Contents/Info.plist"
        echo '    <string>tbuddy-installer</string>' >> "$SOURCE_FOLDER_PATH/Contents/Info.plist"
        echo '    <key>CFBundleIdentifier</key>' >> "$SOURCE_FOLDER_PATH/Contents/Info.plist"
        echo '    <string>com.yourname.tbuddy</string>' >> "$SOURCE_FOLDER_PATH/Contents/Info.plist"
        echo '    <key>CFBundleName</key>' >> "$SOURCE_FOLDER_PATH/Contents/Info.plist"
        echo '    <string>tbuddy-installer</string>' >> "$SOURCE_FOLDER_PATH/Contents/Info.plist"
        echo '    <key>CFBundleVersion</key>' >> "$SOURCE_FOLDER_PATH/Contents/Info.plist"
        echo "    <string>${{ needs.build.outputs.version }}</string>" >> "$SOURCE_FOLDER_PATH/Contents/Info.plist"
        echo '</dict>' >> "$SOURCE_FOLDER_PATH/Contents/Info.plist"
        echo '</plist>' >> "$SOURCE_FOLDER_PATH/Contents/Info.plist"
        
        # Code signing the app
        echo "Signing the application..."
        codesign --deep --force --verify --verbose --sign "Payam Khaninejad" "$SOURCE_FOLDER_PATH"

        # Create DMG file using create-dmg
        npm install -g create-dmg

        echo "Creating DMG..."
        create-dmg "$SOURCE_FOLDER_PATH" "./downloads/$DMG_FILE_NAME" --overwrite \
          --volname "$VOLUME_NAME" \
          --background "installer_background.png" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "$SOURCE_FOLDER_PATH" 200 190 \
          --hide-extension "$SOURCE_FOLDER_PATH" \
          --app-drop-link 600 185
      shell: bash

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.build.outputs.version }}
        release_name: "Bot Release v${{ needs.build.outputs.version }}"
        body: |
          **Release version:** v${{ needs.build.outputs.version }}
        draft: false
        prerelease: false

    - name: Upload Ubuntu release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./downloads/tbuddy-installer
        asset_name: tbuddy-installer-ubuntu-v${{ needs.build.outputs.version }}
        asset_content_type: application/octet-stream
      if: success()

    - name: Upload macOS release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./downloads/${{ needs.build.outputs.version }}-Installer.dmg
        asset_name: tbuddy-installer-macos-v${{ needs.build.outputs.version }}.dmg
        asset_content_type: application/octet-stream
      if: success()

    - name: Upload Windows release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./downloads/tbuddy-installer.exe
        asset_name: tbuddy-installer-windows-v${{ needs.build.outputs.version }}.exe
        asset_content_type: application/octet-stream
      if: success()
