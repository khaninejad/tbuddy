name: Build, Package, and Release Bot

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual trigger of the workflow

permissions:
  contents: write  # Ensure the GITHUB_TOKEN has write permissions for releases

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Extract Version
      id: get_version
      run: |
        $version = python -c "from __version__ import __version__; print(__version__)"
        echo "VERSION=$version" >> $env:GITHUB_ENV
        Write-Output "Version is $version"
      shell: pwsh

    - name: Build installer
      run: |
        pip install pyinstaller
        pyinstaller --onefile gui.py

        # Move the installer to a temp directory
        if [ "${{ matrix.os }}" == "ubuntu-latest" ] || [ "${{ matrix.os }}" == "macos-latest" ]; then
            mv dist/gui /tmp/gui-installer  # For Linux and macOS
        fi
      shell: bash

    - name: Build installer for Windows
      if: matrix.os == 'windows-latest'
      run: |
        Move-Item -Path dist\gui.exe -Destination C:\temp\gui-installer.exe
      shell: pwsh

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: bot-installer-${{ matrix.os }}
        path: |
          ${{ matrix.os == 'ubuntu-latest' && '/tmp/gui-installer' || '' }}
          ${{ matrix.os == 'windows-latest' && 'C:\\temp\\gui-installer.exe' || '' }}
          ${{ matrix.os == 'macos-latest' && '/tmp/gui-installer' || '' }}

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set Release Version
      run: echo "VERSION=${{ needs.build.outputs.version }}" >> $GITHUB_ENV

    # Download artifacts from each OS
    - name: Download Ubuntu artifact
      uses: actions/download-artifact@v3
      with:
        name: bot-installer-ubuntu-latest

    - name: Download Windows artifact
      uses: actions/download-artifact@v3
      with:
        name: bot-installer-windows-latest

    - name: Download macOS artifact
      uses: actions/download-artifact@v3
      with:
        name: bot-installer-macos-latest

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.VERSION }}  # Use the unique version number as the tag
        release_name: "Bot Release v${{ env.VERSION }}"
        body: |
          **Release version:** v${{ env.VERSION }}
        draft: false
        prerelease: false

    # Upload release assets for Ubuntu/macOS
    - name: Upload Ubuntu/MacOS release assets
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: /tmp/gui-installer  # For Linux/macOS
        asset_name: gui-installer-${{ matrix.os }}-v${{ env.VERSION }}
        asset_content_type: application/octet-stream
      if: ${{ success() && (matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest') }}

    - name: Upload Windows release assets
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: C:\temp\gui-installer.exe  # For Windows
        asset_name: gui-installer-windows-v${{ env.VERSION }}.exe
        asset_content_type: application/octet-stream
      if: success() && matrix.os == 'windows-latest'
