name: Build, Package, and Release Bot

# Trigger the workflow on push to the main branch and manual trigger
on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual trigger of the workflow

# Set permissions for GITHUB_TOKEN to allow creating releases
permissions:
  contents: write  # Grants the GITHUB_TOKEN write permissions for creating releases

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Extract Version
      id: get_version
      run: |
        # Extract version from the __version__.py file
        echo "VERSION=$(python -c 'from __version__ import __version__; print(__version__)')" >> $GITHUB_ENV

    - name: Build installer
      run: |
        pip install pyinstaller
        pyinstaller --onefile gui.py

        # Move the installer to a temp directory for Ubuntu/Mac
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            mv dist/gui /tmp/gui-installer  # For Linux
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            mv dist/gui /tmp/gui-installer  # For macOS
        fi
      shell: bash

    - name: Build installer for Windows
      if: matrix.os == 'windows-latest'
      run: |
        mv dist/gui.exe C:\temp\gui-installer.exe
      shell: pwsh

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: bot-installer-${{ matrix.os }}
        path: |
          ${{ matrix.os == 'ubuntu-latest' && '/tmp/gui-installer' || '' }}
          ${{ matrix.os == 'windows-latest' && 'C:\\temp\\gui-installer.exe' || '' }}
          ${{ matrix.os == 'macos-latest' && '/tmp/gui-installer' || '' }}

  release:
    # Ensure the release job runs only after the build job
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Automatically provided token
      with:
        tag_name: v${{ env.VERSION }}
        release_name: "Bot Release v${{ env.VERSION }}"
        body: |
          **Release version:** v${{ env.VERSION }}
        draft: false
        prerelease: false

    - name: Upload release assets for Ubuntu/MacOS
      if: ${{ matrix.os != 'windows-latest' }}  # Skip for Windows
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: /tmp/gui-installer
        asset_name: gui-installer-${{ matrix.os }}-${{ env.VERSION }}
        asset_content_type: application/octet-stream

    - name: Upload release assets for Windows
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: C:\temp\gui-installer.exe
        asset_name: gui-installer-windows-${{ env.VERSION }}.exe
        asset_content_type: application/octet-stream
