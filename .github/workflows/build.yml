name: Build, Package, and Release Bot

on:
  push:
    branches:
      - main
  workflow_dispatch:  

permissions:
  contents: write  

jobs:
  extract_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Extract Version from Version File
        id: extract_version
        run: |
          VERSION=$(python -c "from __version__ import __version__; print(__version__)")
          echo "Extracted version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT  # Updated to use GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV  # Also set it in the environment file

  build:
    needs: extract_version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build and package for macOS
        if: matrix.os == 'macos-latest'
        run: |
          pip install pyinstaller
          pyinstaller --target-arch universal2 --onefile --windowed --icon=app.icns --name=tbuddy-macos-v${{ needs.extract_version.outputs.version }} gui.py

          # Verify the contents of the dist folder
          echo "Listing contents of dist folder"
          ls -R dist/
        shell: bash

      - name: Zip macOS App
        if: matrix.os == 'macos-latest'
        run: |
          cd dist
          zip -r tbuddy-macos-v${{ needs.extract_version.outputs.version }}.zip tbuddy-macos-v${{ needs.extract_version.outputs.version }}.app
        shell: bash

      - name: Upload macOS App
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: tbuddy-macos
          path: ./dist/tbuddy-macos-v${{ needs.extract_version.outputs.version }}.zip

      - name: Build installer for Windows and Ubuntu
        if: matrix.os != 'macos-latest'
        run: |
          pip install pyinstaller
          pyinstaller --onefile gui.py
          
          # Verify the contents of the dist folder
          echo "Listing contents of dist folder"
          ls -R dist/
        shell: bash

      - name: Upload Windows Installer
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: tbuddy-installer-windows
          path: ./dist/gui.exe

      - name: Upload Ubuntu Installer
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: tbuddy-installer-ubuntu
          path: ./dist/gui  

  release:
    needs: [extract_version, build]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.extract_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Confirm Loaded Version
        shell: bash
        run: |
         echo "Loaded VERSION in release stage: $VERSION"
        

      - name: Create downloads directory
        run: mkdir -p ./downloads

      - name: Download Ubuntu installer
        uses: actions/download-artifact@v3
        with:
          name: tbuddy-installer-ubuntu
          path: ./downloads

      - name: Download Windows installer
        uses: actions/download-artifact@v3
        with:
          name: tbuddy-installer-windows
          path: ./downloads

      - name: Download macOS app
        uses: actions/download-artifact@v3
        with:
          name: tbuddy-macos
          path: ./downloads

      - name: Verify downloaded artifacts
        run: |
          echo "Listing downloaded files..."
          ls -R ./downloads

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: "tbuddy Release v${{ env.VERSION }}"
          body: |
            **Release version:** v${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Ubuntu release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./downloads/gui  
          asset_name: tbuddy-installer-ubuntu-v${{ env.VERSION }}
          asset_content_type: application/octet-stream

      - name: Upload Windows release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./downloads/gui.exe 
          asset_name: tbuddy-installer-windows-v${{ env.VERSION }}.exe
          asset_content_type: application/octet-stream

      - name: Upload macOS release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./downloads/tbuddy-macos-v${{ env.VERSION }}.zip
          asset_name: tbuddy-macos-v${{ env.VERSION }}.zip
          asset_content_type: application/zip
