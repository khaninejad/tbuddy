name: Build, Package, and Release Bot

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual trigger of the workflow

permissions:
  contents: write  # Ensure the GITHUB_TOKEN has write permissions for releases

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Extract Version (Linux/macOS)
        id: extract_version_unix
        if: runner.os != 'Windows'
        run: |
          VERSION=$(python -c "from __version__ import __version__; print(__version__)")
          echo "VERSION=${VERSION}"
          echo "::set-output name=version::${VERSION}"
        shell: bash

      - name: Build installer (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          pip install pyinstaller
          pyinstaller --onefile --windowed --name=tbuddy --target-arch x86_64 gui.py
        shell: bash

      # Step to check the contents of the dist folder after building
      - name: Check dist folder contents (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "Listing contents of dist folder"
          ls -R dist/
        shell: bash

      - name: Upload MacOS Installer
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: tbuddy-installer-macos
          path: ./dist/tbuddy.app

      - name: Build installer (Windows and Ubuntu)
        if: matrix.os != 'macos-latest'
        run: |
          pip install pyinstaller
          pyinstaller --onefile gui.py
        shell: bash

      - name: Upload Windows Installer
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: tbuddy-installer-windows
          path: ./dist/gui.exe

      - name: Upload Ubuntu Installer
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: tbuddy-installer-ubuntu
          path: ./dist/gui

  macos_package:
    needs: build
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download macOS artifact
        uses: actions/download-artifact@v3
        with:
          name: tbuddy-installer-macos
          path: ./downloads  # This is where the artifact is downloaded to

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Specify the Node.js version to use

      - name: Install create-dmg
        run: npm install --global create-dmg

      # Get the absolute path of the .app bundle
      - name: Print absolute path of tbuddy.app
        run: |
          APP_PATH=$(realpath ./downloads/tbuddy.app)
          echo "Absolute path of tbuddy.app: $APP_PATH"
        shell: bash

      - name: Create DMG Package
        run: |
          APP_PATH=$(realpath ./downloads/tbuddy.app)
          create-dmg "$APP_PATH" ./tbuddy-installer-dmg --overwrite
        shell: bash

      - name: Upload macOS dmg artifact
        uses: actions/upload-artifact@v3
        with:
          name: tbuddyInstaller.dmg
          path: ./tbuddy-installer-dmg/tbuddyInstaller.dmg

  release:
    needs: [build, macos_package]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Release Version
        run: echo "VERSION=${{ needs.build.outputs.version }}" >> $GITHUB_ENV

      - name: Download Ubuntu artifact
        uses: actions/download-artifact@v3
        with:
          name: tbuddy-installer-ubuntu
          path: ./downloads

      - name: Download Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: tbuddy-installer-windows
          path: ./downloads

      - name: Download macOS dmg artifact
        uses: actions/download-artifact@v3
        with:
          name: tbuddyInstaller.dmg
          path: ./downloads

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.build.outputs.version }}
          release_name: "tbuddy Release v${{ needs.build.outputs.version }}"
          body: |
            **Release version:** v${{ needs.build.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Ubuntu release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./downloads/tbuddy-installer-ubuntu
          asset_name: tbuddy-installer-ubuntu-v${{ needs.build.outputs.version }}
          asset_content_type: application/octet-stream

      - name: Upload macOS release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./downloads/tbuddyInstaller.dmg
          asset_name: tbuddyInstaller-macos-v${{ needs.build.outputs.version }}.dmg
          asset_content_type: application/octet-stream

      - name: Upload Windows release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./downloads/tbuddy-installer-windows.exe
          asset_name: tbuddy-installer-windows-v${{ needs.build.outputs.version }}.exe
          asset_content_type: application/octet-stream
